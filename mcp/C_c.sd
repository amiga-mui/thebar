##stringtype C
##shortstrings
/***************************************************************************

 TheBar.mcc - Next Generation Toolbar MUI Custom Class
 Copyright (C) 2003-2005 Alfonso Ranieri
 Copyright (C) 2005-2007 by TheBar.mcc Open Source Team

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 TheBar class Support Site:  http://www.sf.net/projects/thebar

 $Id$

***************************************************************************/

/****************************************************************
   This file was created automatically by `FlexCat V1.3'
****************************************************************/

#include <proto/locale.h>
#include <proto/utility.h>

struct FC_Type { long ID; const char *Str; };

const struct FC_Type _%i = { %d, %s };

static struct Catalog *TB_Catalog = NULL;

/*** Catalog functions ***/
/// GetStr()
const char *GetStr(APTR fcstr)
{
  const char *defaultstr = ((struct FC_Type *)fcstr)->Str;

  if(LocaleBase && TB_Catalog)
  {
    return (const char *)GetCatalogStr(TB_Catalog, ((struct FC_Type *)fcstr)->ID, (STRPTR)defaultstr);
  }

  return defaultstr;
}
///
/// GetStripStr()
// function that will strip out the special menusigns
const char *GetStripStr(APTR fcstr)
{
   const char *loc_str = GetStr(fcstr);

   return (0 == loc_str[1] ? &loc_str[2] : loc_str);
}
///
/// GetKeyCharStr()
// function that will strip out the special menusigns
char GetKeyChar(const char *string)
{
  char res = 0;

  if(LocaleBase && string)
  {
    for(; *string && *string != '_'; string++)
      ;

    if(*string++)
      res = ToLower(*string);
  }

  return res;
}
///
/// CloseCat()
void CloseCat(void)
{
  if (LocaleBase) CloseCatalog(TB_Catalog);
  TB_Catalog = NULL;
}
///
/// OpenCat(void)
void OpenCat(void)
{
  static const struct TagItem tags[] = {
                                         { OC_BuiltInLanguage, (ULONG)%l },
                                         { OC_Version,         %v },
                                         { TAG_DONE,           0  }
                                       };

  if (LocaleBase && !TB_Catalog)
  {
    TB_Catalog = (struct Catalog *)OpenCatalogA(NULL, (STRPTR)"TheBar.catalog", (struct TagItem *)&tags[0]);
  }
}
///
